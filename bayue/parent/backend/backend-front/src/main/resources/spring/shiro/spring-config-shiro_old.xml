<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       ">
       
<!--        <aop:config proxy-target-class="true"></aop:config> -->
    <!-- 缓存管理器 
    <bean id="cacheManager" class="com.meitun.backend.util.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="springCacheManager"/>
    </bean>
	-->
	<!-- cacheManager -->
	<!-- <bean id="cacheManager" class="com.meitun.backend.shiro.redis.RedisCacheManager">
	    <property name="redisManager" ref="redisManager" />
	</bean> -->

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="ng.bayue.backend.shiro.RetryLimitHashedCredentialsMatcher">
        <!-- <constructor-arg ref="cacheManager"/> --><!-- 通过构造方法来注入cacheManager -->
        <property name="hashAlgorithmName" value="md5"/><!-- 使用md5加密   -->
        <property name="hashIterations" value="2"/><!-- 迭代次数表示是否存储散列后的密码为16进制,需要和生成密码时的一样,默认是base64; -->
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Realm实现 -->
    <bean id="userRealm" class="ng.bayue.backend.shiro.realm.SysAuthorizingRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/><!-- 凭证匹配器 -->
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
<!--         <property name="domain" value="${shiro.domain}"/> -->
<!--         <property name="path" value="/"/> -->
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
<!--          如果您在cookie中设置了HttpOnly属性,那么通过js脚本将无法读取到cookie信息,这样能有效的防止XSS攻击 -->
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
<!--         <property name="domain" value="${shiro.domain}"/> -->
<!--         <property name="path" value="/"/> -->
    </bean>

<!--     rememberMe管理器 -->
   <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
<!--         rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="3600000"/> <!-- 30分钟 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器  -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="3600000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

	<!-- <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <property name="globalSessionTimeout" value="3600000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<property name="sessionDAO" ref="redisSessionDAO" />
		<property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean> -->

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <!-- <property name="cacheManager" ref="cacheManager"/>  -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


	<bean id="shiro" class="ng.bayue.backend.shiro.ShiroFilter" />
	<bean id="passIsSafeFilter" class="ng.bayue.backend.shiro.PasswordSafeFilter" />
	<bean id="perFilter" class="ng.bayue.backend.shiro.PerFilter" />
    <bean id="sysUserFilter" class="ng.bayue.backend.shiro.SysUserFilter"/>
    <bean id="kickoutSessionControlFilter" class="ng.bayue.backend.shiro.KickoutSessionControlFilter">
        <!-- <property name="cacheManager" ref="cacheManager"/> -->
        <!-- <property name="sessionManager" ref="sessionManager"/> -->
        <property name="kickoutAfter" value="false"/><!-- 是否踢出后登录的人 -->
        <property name="maxSession" value="1"/><!-- 一个账户最大同时在线数量 -->
        <property name="kickoutUrl" value="/login?kickout=1"/><!-- 当被踢出后重定向的URL -->
    </bean>
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
       <property name="securityManager" ref="securityManager" />
		<property name="successUrl" value="/index" />
		<property name="loginUrl" value="/login" />
		<property name="unauthorizedUrl" value="/login" />
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="shiro"></entry><!-- 登录验证 -->
                <entry key="pass" value-ref="passIsSafeFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/><!-- 是否被踢出验证-->
                <entry key="per" value-ref="perFilter"/><!-- 是否被踢出验证-->
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
				/statics/**=anon
				/do_not_del/**=anon
            	/login=anon
            	/smsCode=anon
            	/forgetPassword=anon
            	/upload/**=anon
				/securityCode/*=anon
				/doLogin=anon
				/logout=anon
				/pages/commons/**=anon
                /authenticated = authc
<!-- 			/user/**=roles["userManagerView"]  -->
                /topicTest/**=anon
                /** = authc,pass,sysUser,per
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>



</beans>